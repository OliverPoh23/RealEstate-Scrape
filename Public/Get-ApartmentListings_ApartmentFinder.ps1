Function Get-ApartmentListings_ApartmentFinder
{
    [cmdletbinding()]
    Param(
        [string]$City,
        [string]$State_Code
    )
    if(!("Execute.HttpRequest" -as [type]))
    {
        Add-Type -Path ..\lib\Execute.HttpRequest.dll
    }
    $ReferencedAssemblies = @(
        "C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Net.Http\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Net.Http.dll",
        "C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll",
        "C:\Windows\assembly\GAC\Microsoft.mshtml\7.0.3300.0__b03f5f7f11d50a3a\Microsoft.mshtml.dll"
    )
    . C:\.TEMP\BIN\Get-ApartmentListings\Public\Get-ApartmentListings_GeoCode.ps1
    Add-Type -ReferencedAssemblies $ReferencedAssemblies -TypeDefinition "namespace Apartment`n{`n    using System;`n    using System.Collections.Generic;`n    using System.Threading.Tasks;`n    using System.Linq;`n    using System.Net;`n    using System.Text;`n    using System.Text.RegularExpressions;`n    using Execute;`n    using mshtml;`n    public class Listing`n    {`n        public string Link`n        {`n            get;`n            set;`n        }`n        public string ImageUri`n        {`n            get;`n            set;`n        }`n        public string Address`n        {`n            get;`n            set;`n        }`n        public string Name`n        {`n            get;`n            set;`n        }`n        public string PhoneNumber`n        {`n            get;`n            set;`n        }`n        public string PriceRange`n        {`n            get;`n            set;`n        }`n    }`n    public class ListingsObject`n    {`n        public List<Listing> ListingCollection = new List<Listing>();`n    }`n    public class Results`n    {`n        private static void GetResults(ListingsObject collection, Listing listing, string uri)`n        {`n            string p = new WebClient().DownloadString(uri);`n            string low = new Regex(@`"class=`"`"price-range(.*)(\n)(.*)(\`$([0-9]|,)*)\s-\s(\`$([0-9]|,)*)(\s*)`").Match(p).Groups[4].Value;`n            string high = new Regex(@`"class=`"`"price-range(.*)(\n)(.*)(\`$([0-9]|,)*)\s-\s(\`$([0-9]|,)*)(\s*)`").Match(p).Groups[6].Value;`n            if (!String.IsNullOrEmpty(low) && !String.IsNullOrEmpty(high))`n            {`n                listing.PriceRange = low + `" - `" + high;`n                collection.ListingCollection.Add(listing);`n            }`n        }`n        public static async Task AddResult(ListingsObject collection, Listing listing, string uri)`n        {`n            await Task.Factory.StartNew(() =>`n            {`n                GetResults(collection, listing, uri);`n            }, TaskCreationOptions.None);`n        }`n    }`n    public class Pages`n    {`n        public string NextPage = String.Empty;`n        public string JsonString = String.Empty;`n        public bool hasMorePages = true;`n    }`n    public class Paginate`n    {`n        `n        public static void GetNextPageAndJson(string uri,Pages p)`n        {`n            bool more = false;`n            RetObject r = HttpRequest.Send(uri);`n            IHTMLElementCollection links = r.HtmlDocument.getElementsByTagName(`"link`");`n            for(Int32 i = 0; i < links.length; i++)`n            {`n                IHTMLElement e = (IHTMLElement)links.item(i);`n                if (((string)e.getAttribute(`"rel`")).Equals(`"next`"))`n                {`n                    more = true;`n                    p.NextPage = e.getAttribute(`"href`").ToString();`n                }`n            }`n            if (!more)`n            {`n                p.hasMorePages = false;`n            }`n            IHTMLElement j = (IHTMLElement)r.HtmlDocument.getElementById(`"structuredSchemaBreadcrumb`");`n            p.JsonString = j.innerHTML;`n        }`n}`nnamespace Execute`n{`n    using System;`n    using System.Collections.Generic;`n    using System.Collections.Specialized;`n    using System.Linq;`n    using System.Text;`n    using System.Threading.Tasks;`n    using System.Net.Http;`n    using System.Net.Http.Headers;`n    using System.Net;`n    using System.Collections;`n    using System.Text.RegularExpressions;`n    using System.IO;`n    using System.IO.Compression;`n    using mshtml;`n    public class RetObject`n    {`n        public string ResponseText`n        {`n            get;`n            set;`n        }`n        public OrderedDictionary HttpResponseHeaders`n        {`n            get;`n            set;`n        }`n        public CookieCollection CookieCollection`n        {`n            get;`n            set;`n        }`n        public HTMLDocument HtmlDocument`n        {`n            get;`n            set;`n        }`n        public HttpResponseMessage HttpResponseMessage`n        {`n            get;`n            set;`n        }`n    }`n    public class HttpRequest`n    {`n        private static dynamic DOMParser(string responseText)`n        {`n            dynamic domobj = Activator.CreateInstance(Type.GetTypeFromCLSID(Guid.Parse(@`"{25336920-03F9-11cf-8FD0-00AA00686F13}`")));`n            List<string> memberNames = new List<string>();`n            for (int i = 0; i < memberNames.Count; i++)`n            {`n                memberNames.Add(domobj.GetType().GetMembers()[i].Name);`n            }`n            if (memberNames.Contains(`"IHTMLDocument2_write`"))`n            {`n                domobj.IHTMLDocument2_write(Encoding.Unicode.GetBytes(responseText));`n            }`n            else`n            {`n                domobj.write(Encoding.Unicode.GetBytes(responseText));`n            }`n            return domobj;`n        }`n        private static CookieCollection SetCookieParser(List<string> setCookie, CookieCollection cooks, CookieCollection initCookies)`n        {`n            List<Exception> ex = new List<Exception>();`n            List<Hashtable> rckevalues = new List<Hashtable>();`n            List<Hashtable> ckevalues = new List<Hashtable>();`n            List<Cookie> ckeList = new List<Cookie>();`n            if (initCookies != null)`n            {`n                for (int i = 0; i < initCookies.Count; i++)`n                {`n                    ckeList.Add(initCookies[i]);`n                    Hashtable h = new Hashtable();`n                    h.Add(initCookies[i].Name, initCookies[i].Value);`n                    ckevalues.Add(h);`n                }`n            }`n            try`n            {`n`n                List<string> rckes = new List<string>();`n                for (int i = 0; i < cooks.Count; i++)`n                {`n                    rckes.Add(cooks[i].Name);`n                }`n                foreach (string set in setCookie)`n                {`n                    Cookie cke = new Cookie();`n                    for (int i = 0; i < set.Split(';').ToList().Count; i++)`n                    {`n                        List<string> v = new List<string>();`n                        string item = set.Split(';').ToList()[i];`n                        for (int ii = 1; ii < item.Split('=').ToList().Count; ii++)`n                        {`n                            v.Add(item.Split('=')[ii]);`n                        }`n                        string va = String.Join('='.ToString(), v);`n                        string key = new Regex(@`"^(\s*)`").Replace(item.Split('=').ToList()[0], `"`");`n                        string value = new Regex(@`"^(\s*)`").Replace(va, `"`");`n                        if (i == 0)`n                        {`n                            cke.Name = key;`n                            cke.Value = value;`n                        }`n                        else`n                        {`n                            switch (key.ToLower())`n                            {`n                                case `"comment`":`n                                    cke.Comment = value;`n                                    break;`n                                case `"commenturi`":`n                                    cke.CommentUri = new Uri(value);`n                                    break;`n                                case `"httponly`":`n                                    cke.HttpOnly = bool.Parse(value);`n                                    break;`n                                case `"discard`":`n                                    cke.Discard = bool.Parse(value);`n                                    break;`n                                case `"domain`":`n                                    cke.Domain = value;`n                                    break;`n                                case `"expires`":`n                                    cke.Expires = DateTime.Parse(value);`n                                    break;`n                                case `"name`":`n                                    cke.Name = value;`n                                    break;`n                                case `"path`":`n                                    cke.Path = value;`n                                    break;`n                                case `"port`":`n                                    cke.Port = value;`n                                    break;`n                                case `"secure`":`n                                    cke.Secure = bool.Parse(value);`n                                    break;`n                                case `"value`":`n                                    cke.Value = value;`n                                    break;`n                                case `"version`":`n                                    cke.Version = int.Parse(value);`n                                    break;`n                            }`n                        }`n                        if (!rckes.Contains(cke.Name))`n                        {`n                            cooks.Add(cke);`n                        }`n                        else`n                        {`n                            CookieCollection tempRCkes = new CookieCollection();`n                            for (int ii = 0; ii < cooks.Count; ii++)`n                            {`n                                Cookie current = cooks[ii];`n                                if (!current.Name.Equals(cke.Name))`n                                {`n                                    tempRCkes.Add(current);`n                                }`n                            }`n                            tempRCkes.Add(cke);`n                            cooks = new CookieCollection();`n                            for (int ii = 0; ii < tempRCkes.Count; ii++)`n                            {`n                                cooks.Add(tempRCkes[ii]);`n                            }`n                            rckes = new List<string>();`n                            for (int ii = 0; ii < cooks.Count; ii++)`n                            {`n                                rckes.Add(cooks[ii].Name);`n                            }`n                        }`n                    }`n                }`n                if (cooks != null)`n                {`n                    for (int i = 0; i < cooks.Count; i++)`n                    {`n                        Hashtable h = new Hashtable();`n                        h.Add(cooks[i].Name, cooks[i].Value);`n                        rckevalues.Add(h);`n                    }`n                }`n                if (ckevalues != null)`n                {`n                    if (rckevalues != null)`n                    {`n                        List<string> rNames = new List<string>();`n                        List<string> rValue = new List<string>();`n                        for (int i = 0; i < rckevalues.Count; i++)`n                        {`n                            string rcken = rckevalues[i].Keys.ToString();`n                            string rckev = rckevalues[i].Values.ToString();`n                            rNames.Add(rcken);`n                            rValue.Add(rckev);`n                        }`n                        for (int i = 0; i < ckevalues.Count; i++)`n                        {`n                            string ckeName = ckevalues[i].Keys.ToString();`n                            string ckeValu = ckevalues[i].Values.ToString();`n                            if (!rValue.Contains(ckeValu))`n                            {`n                                if (!rNames.Contains(ckeName))`n                                {`n                                    cooks.Add(ckeList.Where(item => item.Name.Equals(ckeName)).FirstOrDefault());`n                                }`n                            }`n                            else`n                            {`n                                if (!rNames.Contains(ckeName))`n                                {`n                                    cooks.Add(ckeList.Where(item => item.Name.Equals(ckeName)).FirstOrDefault());`n                                }`n                            }`n                        }`n                    }`n                    else`n                    {`n                        ckeList.ForEach(i => cooks.Add(i));`n                    }`n                }`n            }`n            catch (Exception e)`n            {`n                ex.Add(e);`n            }`n            return cooks;`n        }`n        public static void CopyTo(Stream src, Stream dest)`n        {`n            byte[] bytes = new byte[4096];`n            int cnt;`n            while ((cnt = src.Read(bytes, 0, bytes.Length)) != 0)`n            {`n                dest.Write(bytes, 0, cnt);`n            }`n        }`n        public static string Unzip(byte[] bytes)`n        {`n            using (var msi = new MemoryStream(bytes))`n            using (var mso = new MemoryStream())`n            {`n                using (var gs = new GZipStream(msi, CompressionMode.Decompress))`n                {`n                    //gs.CopyTo(mso);`n                    CopyTo(gs, mso);`n                }`n                return Encoding.UTF8.GetString(mso.ToArray());`n            }`n        }`n        private static async Task<RetObject> SendHttp(string uri, HttpMethod method = null, OrderedDictionary headers = null, CookieCollection cookies = null, string contentType = null, string body = null, string filepath = null)`n        {`n            byte[] reStream;`n            RetObject retObj = new RetObject();`n            HttpResponseMessage res = new HttpResponseMessage();`n            OrderedDictionary httpResponseHeaders = new OrderedDictionary();`n            CookieCollection responseCookies;`n            CookieCollection rCookies = new CookieCollection();`n            List<string> setCookieValue = new List<string>();`n            CookieContainer coo = new CookieContainer();`n            dynamic dom = new object();`n            string htmlString = String.Empty;`n            if (method == null)`n            {`n                method = HttpMethod.Get;`n            }`n            HttpClientHandler handle = new HttpClientHandler()`n            {`n                AutomaticDecompression = (DecompressionMethods)1 & (DecompressionMethods)2,`n                UseProxy = false,`n                AllowAutoRedirect = true,`n                MaxAutomaticRedirections = 500`n            };`n            HttpClient client = new HttpClient(handle);`n            if (!client.DefaultRequestHeaders.Contains(`"User-Agent`"))`n            {`n                client.DefaultRequestHeaders.Add(`"User-Agent`", `"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36`");`n            }`n            if (client.DefaultRequestHeaders.Contains(`"Path`"))`n            {`n                client.DefaultRequestHeaders.Remove(`"Path`");`n            }`n            client.DefaultRequestHeaders.Add(`"Path`", (new Uri(uri).PathAndQuery));`n            List<string> headersToSkip = new List<string>();`n            headersToSkip.Add(`"Accept`");`n            headersToSkip.Add(`"pragma`");`n            headersToSkip.Add(`"Cache-Control`");`n            headersToSkip.Add(`"Date`");`n            headersToSkip.Add(`"Content-Length`");`n            headersToSkip.Add(`"Content-Type`");`n            headersToSkip.Add(`"Expires`");`n            headersToSkip.Add(`"Last-Modified`");`n            if (headers != null)`n            {`n                headersToSkip.ForEach((i) => {`n                    headers.Remove(i);`n                });`n                IEnumerator enume = headers.Keys.GetEnumerator();`n                while (enume.MoveNext())`n                {`n                    string key = enume.Current.ToString();`n                    string value = String.Join(`"\n`", headers[key]);`n                    if (client.DefaultRequestHeaders.Contains(key))`n                    {`n                        client.DefaultRequestHeaders.Remove(key);`n                    }`n                    try`n                    {`n                        client.DefaultRequestHeaders.Add(key, value);`n                    }`n                    catch`n                    {`n                        client.DefaultRequestHeaders.TryAddWithoutValidation(key, value);`n                    }`n                }`n            }`n            if (cookies != null)`n            {`n                IEnumerator cnume = cookies.GetEnumerator();`n                while (cnume.MoveNext())`n                {`n                    Cookie cook = (Cookie)cnume.Current;`n                    coo.Add(cook);`n                }`n                handle.CookieContainer = coo;`n            }`n            switch (method.ToString())`n            {`n                case `"DELETE`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"GET`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"HEAD`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"OPTIONS`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"POST`":`n                    if (String.IsNullOrEmpty(contentType))`n                    {`n                        contentType = `"application/x-www-form-urlencoded`";`n                    }`n                    if (!String.IsNullOrEmpty(body))`n                    {`n                        switch (contentType)`n                        {`n                            case @`"application/x-www-form-urlencoded`":`n                                res = await client.SendAsync(`n                                    (new HttpRequestMessage(method, uri)`n                                    {`n                                        Content = (new StringContent(body, Encoding.UTF8, contentType))`n                                    })`n                                );`n                                break;`n                            case @`"multipart/form-data`":`n                                MultipartFormDataContent mpc = new MultipartFormDataContent(`"Boundary----`" + DateTime.Now.Ticks.ToString(`"x`"));`n                                if (!String.IsNullOrEmpty(filepath))`n                                {`n                                    if (File.Exists(filepath))`n                                    {`n                                        ByteArrayContent bac = new ByteArrayContent(File.ReadAllBytes(filepath));`n                                        bac.Headers.Add(`"Content-Type`", `"application/octet-stream`");`n                                        mpc.Add(bac, new FileInfo(filepath).Name);`n                                    }`n                                }`n                                if (!String.IsNullOrEmpty(body))`n                                {`n                                    StringContent sc = new StringContent(body, Encoding.UTF8, @`"application/x-www-form-urlencoded`");`n                                    mpc.Add(sc);`n                                }`n                                res = await client.SendAsync(`n                                    (new HttpRequestMessage(method, uri)`n                                    {`n                                        Content = mpc`n                                    })`n                                );`n                                break;`n                            default:`n                                res = await client.SendAsync(`n                                    (new HttpRequestMessage(method, uri)`n                                    {`n                                        Content = (new StringContent(body, Encoding.UTF8, contentType))`n                                    })`n                                );`n                                break;`n                        }`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    else`n                    {`n                        res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"PUT`":`n                    if (String.IsNullOrEmpty(contentType))`n                    {`n                        contentType = `"application/x-www-form-urlencoded`";`n                    }`n                    if (!String.IsNullOrEmpty(body))`n                    {`n                        res = await client.SendAsync(`n                            (new HttpRequestMessage(method, uri)`n                            {`n                                Content = (new StringContent(body, Encoding.UTF8, contentType))`n                            })`n                        );`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    else`n                    {`n                        res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HtmlDocument = dom;`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"TRACE`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n            }`n            if (!String.IsNullOrEmpty(htmlString))`n            {`n                retObj.ResponseText = htmlString;`n            }`n            retObj.CookieCollection = rCookies;`n            return retObj;`n        }`n        public static RetObject Send(string uri, HttpMethod method = null, OrderedDictionary headers = null, CookieCollection cookies = null, string contentType = null, string body = null, string filepath = null)`n        {`n            Task<RetObject> r = SendHttp(uri, method, headers, cookies, contentType, body, filepath);`n            return r.Result;`n        }`n    }`n}}"
    $geo = Get-ApartmentListings_GeoCode -City $City -State_Code $State_Code
    $Uri = "https://www.apartmentfinder.com/api/url/"
    $Headers = [ordered]@{
        "method"="POST"
        "authority"="www.apartmentfinder.com"
        "scheme"="https"
        "path"="/api/url/"
        "pragma"="no-cache"
        "cache-control"="no-cache"
        "sec-ch-ua"="`"Google Chrome`";v=`"89`", `"Chromium`";v=`"89`", `";Not A Brand`";v=`"99`""
        "accept"="application/json, text/javascript, */*; q=0.01"
        "dnt"="1"
        "x-requested-with"="XMLHttpRequest"
        "sec-ch-ua-mobile"="?0"
        "user-agent"="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36"
        "origin"="https://www.apartmentfinder.com"
        "sec-fetch-site"="same-origin"
        "sec-fetch-mode"="cors"
        "sec-fetch-dest"="empty"
        "referer"="https://www.apartmentfinder.com/"
        "accept-encoding"="gzip, deflate"
        "accept-language"="en-US,en;q=0.9"
    }
    $ContentType = "application/json"
    $Body = "{`"Geography`":{`"ID`":`"bq5st89`",`"Display`":`"$($City), $($State_Code)`",`"GeographyType`":2,`"Address`":{`"City`":`"$($City)`",`"State`":`"$($State_Code)`",`"MarketName`":`"$($City)`",`"DMA`":`"$($City), $($State_Code)`"},`"Location`":{`"Latitude`":$($geo.Latitude),`"Longitude`":$($geo.Longitude)},`"BoundingBox`":{`"LowerRight`":{`"Latitude`":$($geo.South),`"Longitude`":$($geo.East)},`"UpperLeft`":{`"Latitude`":$($geo.North),`"Longitude`":$($geo.West)}}},`"Listing`":{`"MinBeds`":`"1`",`"MinRentAmount`":null,`"MaxRentAmount`":null}}"
    $r = [Apartment.Execute.HttpRequest]::Send(
        $uri,
        [system.net.Http.HttpMethod]::Post,
        $Headers,
        $null,
        $ContentType,
        $Body
    )
    $uri =  "$($r.ResponseText | ConvertFrom-Json |% url)" + "/q/?bt=1&am=65558"
    $pages = [Apartment.Pages]::New()
    [Apartment.Paginate]::GetNextPageAndJson($uri,$pages)
    $json = $pages.JsonString | ConvertFrom-Json
    $results = [Apartment.ListingsObject]::New()
    $page = 1
    $tasks = @()
    for($i = 0; $i -lt $json.about.count; $i++){
        if($i -gt 0){
            write-progress -PercentComplete ($i/($json.about.Count - 1)*100) -Status "$([math]::Round(($i/($json.about.Count - 1)*100),2))%" -Activity "page $($page) :: $($i) of $($json.about.Count - 1)"
        }
        $item = $json.about[$i]
        $listing = [Apartment.Listing]::new()
        $listing.Link = $item.url
        $listing.ImageUri  = $item.image
        $item.address | select streetAddress,addressLocality,addressRegion,postalCode | % {
            $listing.Address = "$($_ | % streetAddress), $($_ |% addressLocality), $($_ |% addressRegion) $($_ |% postalCode)"
        }
        $listing.Name = $item.name
        $listing.PhoneNumber = $item.telephone
        $tasks += [Apartment.Results]::AddResult($results,$listing,$item.url)
    }
    $page = 2
    while($pages.hasMorePages)
    {
        [Apartment.Paginate]::GetNextPageAndJson($pages.NextPage,$pages)
        $json = $pages.JsonString | ConvertFrom-Json
        for($i = 0; $i -lt $json.about.count; $i++){
            if($i -gt 0){
                write-progress -PercentComplete ($i/($json.about.Count - 1)*100) -Status "$([math]::Round(($i/($json.about.Count - 1)*100),2))%" -Activity "page $($page) :: $($i) of $($json.about.Count - 1)"
            }
            $item = $json.about[$i]
            $listing = [Apartment.Listing]::new()
            $listing.ImageUri  = $item.image
            $listing.Link = $item.url
            $item.address | select streetAddress,addressLocality,addressRegion,postalCode | % {
                $listing.Address = "$($_ | % streetAddress), $($_ |% addressLocality), $($_ |% addressRegion) $($_ |% postalCode)"
            }
            $listing.Name = $item.name
            $listing.PhoneNumber = $item.telephone
            $tasks += [Apartment.Results]::AddResult($results,$listing,$item.url)
        }
        $page++
    }
    return $results
}