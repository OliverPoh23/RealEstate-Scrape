Function Get-ApartmentListings_MyNewPlace
{
    [cmdletbinding()]
    Param(
        [string]$City,
        [string]$State_Code
    )
    function Get-FullAddress
    {
        [cmdletbinding()]
        Param(
            [MyNewPlace.Listing]$Listing
        )
        ([execute.HttpRequest]::Send("https://maps.googleapis.com/maps/api/geocode/json?latlng=$($listing.Latitude.ToString()),$($listing.Longitude.ToString())&key=$($env:GoogleGeoCode_API_Key)").ResponseText | convertfrom-json).results.Where({
            (
                $_.geometry.location_type -eq 'ROOFTOP' -and `
                (
                    'premise' -in @($_.types) -or `
                    'real_estate_agency' -in @($_.types) -or `
                    'street_address' -in @($_.types)
                )
            )
        }).ForEach({
            $_.address_components.Where({
                'locality' -in @($_.types) -or `
                'administrative_area_level_1' -in @($_.types) -or `
                'postal_code' -in @($_.types)
            }).ForEach({
                $ac = $_
                $ac_type = @($_.types)[0]
                switch($ac_type){
                    "locality" { $c = $ac |% long_name }
                    'administrative_area_level_1' { $s = $ac |% long_name }
                    'postal_code' { $z = $ac |% long_name }
                }
            })
        })
        return "$($c), $($s) $($z)"
    }
    $ReferencedAssemblies = @(
        "C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Net.Http\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Net.Http.dll",
        "C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll",
        "C:\Windows\assembly\GAC\Microsoft.mshtml\7.0.3300.0__b03f5f7f11d50a3a\Microsoft.mshtml.dll"
    )
    Add-Type -ReferencedAssemblies $ReferencedAssemblies -TypeDefinition "namespace MyNewPlace`n{`n    using System;`n    using System.Collections;`n    using System.Collections.Generic;`n    using System.Threading.Tasks;`n    using System.Linq;`n    using System.Net;`n    using System.Text;`n    using System.Text.RegularExpressions;`n    using MyNewPlace.Execute;`n    using mshtml;`n    using System.IO;`n    public class Listing`n    {`n        public string Address`n        {`n            get;`n            set;`n        }`n        public string PhoneNumber`n        {`n            get;`n            set;`n        }`n        public Int32 Price_Low`n        {`n            get;`n            set;`n        }`n        public Int32 Price_High`n        {`n            get;`n            set;`n        }`n        public Int32 Beds_High`n        {`n            get;`n            set;`n        }`n        public Int32 Beds_Low`n        {`n            get;`n            set;`n        }`n        public Double Baths_High`n        {`n            get;`n            set;`n        }`n        public Double Baths_Low`n        {`n            get;`n            set;`n        }`n        public string Link`n        {`n            get;`n            set;`n        }`n        public string ImageUri`n        {`n            get;`n            set;`n        }`n        public Double Latitude`n        {`n            get;`n            set;`n        }`n        public Double Longitude`n        {`n            get;`n            set;`n        }`n        public string Title`n        {`n            get;`n            set;`n        }`n    }`n    public class Results`n    {`n        public List<Listing> ListingCollection = new List<Listing>();`n        public List<string> errorLog = new List<string>();`n        private void GetResults(string uri)`n        {`n            try`n            {`n                RetObj r = HttpRequest.Send(uri);`n                IHTMLElement2 li = (IHTMLElement2)(r.HtmlDocument.getElementById(`"listings`"));`n                IHTMLElementCollection listings = (IHTMLElementCollection)(li.getElementsByTagName(`"a`"));`n                for (Int32 i = 0; i < listings.length; i++)`n                {`n                    Listing item = new Listing();`n                    List<string> p = new List<string>();`n                    string it = String.Empty;`n                    string adr = String.Empty;`n                    string pri = String.Empty;`n                    string bed = String.Empty;`n                    string bath = String.Empty;`n                    string title = String.Empty;`n                    string imageUri = String.Empty;`n                    string phoneNumber = String.Empty;`n                    IHTMLElement listing = (IHTMLElement)listings.item(i);`n                    string href = listing.getAttribute(`"href`").ToString();`n                    string linkUri = new Regex(@`"^about:`").Replace(href, @`"https://mynewplace.com`");`n                    Double latitude = Convert.ToDouble(listing.getAttribute(`"data-lat`").ToString());`n                    Double longitude = Convert.ToDouble(listing.getAttribute(`"data-lng`").ToString());`n                    IHTMLElementCollection all = (IHTMLElementCollection)(listing.all);`n                    List<string> innerText = new List<string>();`n                    for (Int32 ii = 0; ii < all.length; ii++)`n                    {`n                        IHTMLElement e = (IHTMLElement)all.item(ii);`n                        innerText.Add(e.innerText);`n                        if (e.tagName.ToLower().Equals(`"p`"))`n                        {`n                            if (ii == 0)`n                            {`n                                it = e.innerText;`n                            }`n                            if(ii == 3)`n                            {`n                                List<string> ptag = e.innerText.Split((Char)10).ToList();`n                                pri = ptag[0];`n                                adr = ptag[2];`n                            }`n                            p.Add(e.outerHTML);`n                        }`n                        if (e.tagName.ToLower().Equals(`"i`"))`n                        {`n                            if(ii == 5)`n                            {`n                                bed = e.innerText;`n                            }`n                            if (ii == 6)`n                            {`n                                bath = e.innerText;`n                            }`n                        }`n                        if (e.tagName.ToLower().Equals(`"b`"))`n                        {`n                            phoneNumber = e.innerText;`n                        }`n                        if (e.tagName.ToLower().Equals(`"h2`"))`n                        {`n                            title = e.innerText;`n                        }`n                        if (e.tagName.ToLower().Equals(`"img`"))`n                        {`n                            imageUri = e.getAttribute(`"data-src`").ToString();`n                        }`n                    }`n                    string oh = String.Join(String.Empty, p);`n                    string price = new Regex(@`",`").Replace(new Regex(@`"\`$`").Replace(pri.Split((Char)10).ToList().FirstOrDefault(), String.Empty), String.Empty);`n                    if (price.Split((Char)32).ToList().Count > 1 && !price.Trim().ToLower().Equals(@`"please call`"))`n                    {`n                        item.Price_Low = Convert.ToInt32(new Regex(@`"^(\d*)`").Match(price).Groups[1].Value);`n                        item.Price_High = Convert.ToInt32(new Regex(@`"\s+(\d+)`").Match(price).Groups[1].Value);`n                    }`n                    else`n                    {`n                        if (!price.Trim().ToLower().Equals(@`"please call`"))`n                        {`n                            try`n                            {`n                                item.Price_Low = Convert.ToInt32(price);`n                                item.Price_High = Convert.ToInt32(price);`n                            }`n                            catch`n                            {`n                            }`n                        }`n                    }`n                    if (bath.Split((Char)32).ToList().Count > 1)`n                    {`n                        item.Baths_Low = Convert.ToDouble(new Regex(@`"^(\S+)`").Match(bath).Groups[1].Value);`n                        item.Baths_High = Convert.ToDouble(new Regex(@`"-\s+(\S+)`").Match(bath).Groups[1].Value);`n                    }`n                    else`n                    {`n                        item.Baths_Low = Convert.ToDouble(bath);`n                        item.Baths_High = Convert.ToDouble(bath);`n                    }`n                    if (bed.Split((Char)32).ToList().Count > 1)`n                    {`n                        item.Beds_Low = Convert.ToInt32(new Regex(@`"^(\d+)`").Match(bed).Groups[1].Value);`n                        item.Beds_High = Convert.ToInt32(new Regex(@`"-\s+(\d+)`").Match(bed).Groups[1].Value);`n                    }`n                    else`n                    {`n                        item.Beds_Low = Convert.ToInt32(bed);`n                        item.Beds_High = Convert.ToInt32(bed);`n                    }`n                    string address = adr.Split((Char)40).ToList().FirstOrDefault();`n                    item.ImageUri = imageUri;`n                    item.Latitude = latitude;`n                    item.Longitude = longitude;`n                    item.Title = title;`n                    item.PhoneNumber = phoneNumber;`n                    item.Link = linkUri;`n                    item.Address = address;`n                    string[] uris = new string[this.ListingCollection.Count];`n                    for (Int32 a = 0; a < uris.Length; a++)`n                    {`n                        uris[a] = this.ListingCollection[a].Link;`n                    }`n                    if (!uris.Contains(linkUri))`n                    {`n                        this.ListingCollection.Add(item);`n                    }`n                }`n            }`n            catch (Exception e)`n            {`n                IEnumerator enume = e.Data.Keys.GetEnumerator();`n                while (enume.MoveNext())`n                {`n                    object c = enume.Current;`n                    this.errorLog.Add(c.ToString());`n                }`n                this.errorLog.Add(e.Message);`n                this.errorLog.Add(e.HResult.ToString());`n                this.errorLog.Add(e.Source);`n                this.errorLog.Add(e.StackTrace);`n                this.errorLog.Add(e.TargetSite.Name);`n                this.errorLog.Add(e.ToString());`n            }`n        }`n        public async Task AddResult(string uri)`n        {`n            await Task.Factory.StartNew(() =>`n            {`n                try`n                {`n                    this.GetResults(uri);`n                }`n                catch (Exception e)`n                {`n                    IEnumerator enume = e.Data.Keys.GetEnumerator();`n                    while (enume.MoveNext())`n                    {`n                        object c = enume.Current;`n                        this.errorLog.Add(c.ToString());`n                    }`n                    this.errorLog.Add(e.Message);`n                    this.errorLog.Add(e.HResult.ToString());`n                    this.errorLog.Add(e.Source);`n                    this.errorLog.Add(e.StackTrace);`n                    this.errorLog.Add(e.TargetSite.Name);`n                    this.errorLog.Add(e.ToString());`n                }`n            }, TaskCreationOptions.None);`n        }`n    }`n}`nnamespace MyNewPlace.Execute`n{`n    using System;`n    using System.Collections.Generic;`n    using System.Collections.Specialized;`n    using System.Linq;`n    using System.Text;`n    using System.Threading.Tasks;`n    using System.Net.Http;`n    using System.Net.Http.Headers;`n    using System.Net;`n    using System.Collections;`n    using System.Text.RegularExpressions;`n    using System.IO;`n    using System.IO.Compression;`n    using mshtml;`n    public class RetObj`n    {`n        public string ResponseText`n        {`n            get;`n            set;`n        }`n        public OrderedDictionary HttpResponseHeaders`n        {`n            get;`n            set;`n        }`n        public CookieCollection CookieCollection`n        {`n            get;`n            set;`n        }`n        public HTMLDocument HtmlDocument`n        {`n            get;`n            set;`n        }`n        public HttpResponseMessage HttpResponseMessage`n        {`n            get;`n            set;`n        }`n    }`n    public class HttpRequest`n    {`n        private static dynamic DOMParser(string responseText)`n        {`n            dynamic domobj = Activator.CreateInstance(Type.GetTypeFromCLSID(Guid.Parse(@`"{25336920-03F9-11cf-8FD0-00AA00686F13}`")));`n            List<string> memberNames = new List<string>();`n            for (int i = 0; i < memberNames.Count; i++)`n            {`n                memberNames.Add(domobj.GetType().GetMembers()[i].Name);`n            }`n            if (memberNames.Contains(`"IHTMLDocument2_write`"))`n            {`n                domobj.IHTMLDocument2_write(Encoding.Unicode.GetBytes(responseText));`n            }`n            else`n            {`n                domobj.write(Encoding.Unicode.GetBytes(responseText));`n            }`n            return domobj;`n        }`n        private static CookieCollection SetCookieParser(List<string> setCookie, CookieCollection cooks, CookieCollection initCookies)`n        {`n            List<Exception> ex = new List<Exception>();`n            List<Hashtable> rckevalues = new List<Hashtable>();`n            List<Hashtable> ckevalues = new List<Hashtable>();`n            List<Cookie> ckeList = new List<Cookie>();`n            if (initCookies != null)`n            {`n                for (int i = 0; i < initCookies.Count; i++)`n                {`n                    ckeList.Add(initCookies[i]);`n                    Hashtable h = new Hashtable();`n                    h.Add(initCookies[i].Name, initCookies[i].Value);`n                    ckevalues.Add(h);`n                }`n            }`n            try`n            {`n`n                List<string> rckes = new List<string>();`n                for (int i = 0; i < cooks.Count; i++)`n                {`n                    rckes.Add(cooks[i].Name);`n                }`n                foreach (string set in setCookie)`n                {`n                    Cookie cke = new Cookie();`n                    for (int i = 0; i < set.Split(';').ToList().Count; i++)`n                    {`n                        List<string> v = new List<string>();`n                        string item = set.Split(';').ToList()[i];`n                        for (int ii = 1; ii < item.Split('=').ToList().Count; ii++)`n                        {`n                            v.Add(item.Split('=')[ii]);`n                        }`n                        string va = String.Join('='.ToString(), v);`n                        string key = new Regex(@`"^(\s*)`").Replace(item.Split('=').ToList()[0], `"`");`n                        string value = new Regex(@`"^(\s*)`").Replace(va, `"`");`n                        if (i == 0)`n                        {`n                            cke.Name = key;`n                            cke.Value = value;`n                        }`n                        else`n                        {`n                            switch (key.ToLower())`n                            {`n                                case `"comment`":`n                                    cke.Comment = value;`n                                    break;`n                                case `"commenturi`":`n                                    cke.CommentUri = new Uri(value);`n                                    break;`n                                case `"httponly`":`n                                    cke.HttpOnly = bool.Parse(value);`n                                    break;`n                                case `"discard`":`n                                    cke.Discard = bool.Parse(value);`n                                    break;`n                                case `"domain`":`n                                    cke.Domain = value;`n                                    break;`n                                case `"expires`":`n                                    cke.Expires = DateTime.Parse(value);`n                                    break;`n                                case `"name`":`n                                    cke.Name = value;`n                                    break;`n                                case `"path`":`n                                    cke.Path = value;`n                                    break;`n                                case `"port`":`n                                    cke.Port = value;`n                                    break;`n                                case `"secure`":`n                                    cke.Secure = bool.Parse(value);`n                                    break;`n                                case `"value`":`n                                    cke.Value = value;`n                                    break;`n                                case `"version`":`n                                    cke.Version = int.Parse(value);`n                                    break;`n                            }`n                        }`n                        if (!rckes.Contains(cke.Name))`n                        {`n                            cooks.Add(cke);`n                        }`n                        else`n                        {`n                            CookieCollection tempRCkes = new CookieCollection();`n                            for (int ii = 0; ii < cooks.Count; ii++)`n                            {`n                                Cookie current = cooks[ii];`n                                if (!current.Name.Equals(cke.Name))`n                                {`n                                    tempRCkes.Add(current);`n                                }`n                            }`n                            tempRCkes.Add(cke);`n                            cooks = new CookieCollection();`n                            for (int ii = 0; ii < tempRCkes.Count; ii++)`n                            {`n                                cooks.Add(tempRCkes[ii]);`n                            }`n                            rckes = new List<string>();`n                            for (int ii = 0; ii < cooks.Count; ii++)`n                            {`n                                rckes.Add(cooks[ii].Name);`n                            }`n                        }`n                    }`n                }`n                if (cooks != null)`n                {`n                    for (int i = 0; i < cooks.Count; i++)`n                    {`n                        Hashtable h = new Hashtable();`n                        h.Add(cooks[i].Name, cooks[i].Value);`n                        rckevalues.Add(h);`n                    }`n                }`n                if (ckevalues != null)`n                {`n                    if (rckevalues != null)`n                    {`n                        List<string> rNames = new List<string>();`n                        List<string> rValue = new List<string>();`n                        for (int i = 0; i < rckevalues.Count; i++)`n                        {`n                            string rcken = rckevalues[i].Keys.ToString();`n                            string rckev = rckevalues[i].Values.ToString();`n                            rNames.Add(rcken);`n                            rValue.Add(rckev);`n                        }`n                        for (int i = 0; i < ckevalues.Count; i++)`n                        {`n                            string ckeName = ckevalues[i].Keys.ToString();`n                            string ckeValu = ckevalues[i].Values.ToString();`n                            if (!rValue.Contains(ckeValu))`n                            {`n                                if (!rNames.Contains(ckeName))`n                                {`n                                    cooks.Add(ckeList.Where(item => item.Name.Equals(ckeName)).FirstOrDefault());`n                                }`n                            }`n                            else`n                            {`n                                if (!rNames.Contains(ckeName))`n                                {`n                                    cooks.Add(ckeList.Where(item => item.Name.Equals(ckeName)).FirstOrDefault());`n                                }`n                            }`n                        }`n                    }`n                    else`n                    {`n                        ckeList.ForEach(i => cooks.Add(i));`n                    }`n                }`n            }`n            catch (Exception e)`n            {`n                ex.Add(e);`n            }`n            return cooks;`n        }`n        public static void CopyTo(Stream src, Stream dest)`n        {`n            byte[] bytes = new byte[4096];`n            int cnt;`n            while ((cnt = src.Read(bytes, 0, bytes.Length)) != 0)`n            {`n                dest.Write(bytes, 0, cnt);`n            }`n        }`n        public static string Unzip(byte[] bytes)`n        {`n            using (var msi = new MemoryStream(bytes))`n            using (var mso = new MemoryStream())`n            {`n                using (var gs = new GZipStream(msi, CompressionMode.Decompress))`n                {`n                    CopyTo(gs, mso);`n                }`n                return Encoding.UTF8.GetString(mso.ToArray());`n            }`n        }`n        private static async Task<RetObj> SendHttp(string uri, HttpMethod method = null, OrderedDictionary headers = null, CookieCollection cookies = null, string contentType = null, string body = null, string filepath = null)`n        {`n            byte[] reStream;`n            RetObj retObj = new RetObj();`n            HttpResponseMessage res = new HttpResponseMessage();`n            OrderedDictionary httpResponseHeaders = new OrderedDictionary();`n            CookieCollection responseCookies;`n            CookieCollection rCookies = new CookieCollection();`n            List<string> setCookieValue = new List<string>();`n            CookieContainer coo = new CookieContainer();`n            dynamic dom = new object();`n            string htmlString = String.Empty;`n            if (method == null)`n            {`n                method = HttpMethod.Get;`n            }`n            HttpClientHandler handle = new HttpClientHandler()`n            {`n                AutomaticDecompression = (DecompressionMethods)1 & (DecompressionMethods)2,`n                UseProxy = false,`n                AllowAutoRedirect = true,`n                MaxAutomaticRedirections = 500`n            };`n            HttpClient client = new HttpClient(handle);`n            if (!client.DefaultRequestHeaders.Contains(`"User-Agent`"))`n            {`n                client.DefaultRequestHeaders.Add(`"User-Agent`", `"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36`");`n            }`n            if (client.DefaultRequestHeaders.Contains(`"Path`"))`n            {`n                client.DefaultRequestHeaders.Remove(`"Path`");`n            }`n            client.DefaultRequestHeaders.Add(`"Path`", (new Uri(uri).PathAndQuery));`n            List<string> headersToSkip = new List<string>();`n            headersToSkip.Add(`"Accept`");`n            headersToSkip.Add(`"pragma`");`n            headersToSkip.Add(`"Cache-Control`");`n            headersToSkip.Add(`"Date`");`n            headersToSkip.Add(`"Content-Length`");`n            headersToSkip.Add(`"Content-Type`");`n            headersToSkip.Add(`"Expires`");`n            headersToSkip.Add(`"Last-Modified`");`n            if (headers != null)`n            {`n                headersToSkip.ForEach((i) => {`n                    headers.Remove(i);`n                });`n                IEnumerator enume = headers.Keys.GetEnumerator();`n                while (enume.MoveNext())`n                {`n                    string key = enume.Current.ToString();`n                    string value = String.Join(`"\n`", headers[key]);`n                    if (client.DefaultRequestHeaders.Contains(key))`n                    {`n                        client.DefaultRequestHeaders.Remove(key);`n                    }`n                    try`n                    {`n                        client.DefaultRequestHeaders.Add(key, value);`n                    }`n                    catch`n                    {`n                        client.DefaultRequestHeaders.TryAddWithoutValidation(key, value);`n                    }`n                }`n            }`n            if (cookies != null)`n            {`n                IEnumerator cnume = cookies.GetEnumerator();`n                while (cnume.MoveNext())`n                {`n                    Cookie cook = (Cookie)cnume.Current;`n                    coo.Add(cook);`n                }`n                handle.CookieContainer = coo;`n            }`n            switch (method.ToString())`n            {`n                case `"DELETE`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"GET`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"HEAD`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"OPTIONS`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"POST`":`n                    if (String.IsNullOrEmpty(contentType))`n                    {`n                        contentType = `"application/x-www-form-urlencoded`";`n                    }`n                    if (!String.IsNullOrEmpty(body))`n                    {`n                        switch (contentType)`n                        {`n                            case @`"application/x-www-form-urlencoded`":`n                                res = await client.SendAsync(`n                                    (new HttpRequestMessage(method, uri)`n                                    {`n                                        Content = (new StringContent(body, Encoding.UTF8, contentType))`n                                    })`n                                );`n                                break;`n                            case @`"multipart/form-data`":`n                                MultipartFormDataContent mpc = new MultipartFormDataContent(`"Boundary----`" + DateTime.Now.Ticks.ToString(`"x`"));`n                                if (!String.IsNullOrEmpty(filepath))`n                                {`n                                    if (File.Exists(filepath))`n                                    {`n                                        ByteArrayContent bac = new ByteArrayContent(File.ReadAllBytes(filepath));`n                                        bac.Headers.Add(`"Content-Type`", `"application/octet-stream`");`n                                        mpc.Add(bac, new FileInfo(filepath).Name);`n                                    }`n                                }`n                                if (!String.IsNullOrEmpty(body))`n                                {`n                                    StringContent sc = new StringContent(body, Encoding.UTF8, @`"application/x-www-form-urlencoded`");`n                                    mpc.Add(sc);`n                                }`n                                res = await client.SendAsync(`n                                    (new HttpRequestMessage(method, uri)`n                                    {`n                                        Content = mpc`n                                    })`n                                );`n                                break;`n                            default:`n                                res = await client.SendAsync(`n                                    (new HttpRequestMessage(method, uri)`n                                    {`n                                        Content = (new StringContent(body, Encoding.UTF8, contentType))`n                                    })`n                                );`n                                break;`n                        }`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    else`n                    {`n                        res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"PUT`":`n                    if (String.IsNullOrEmpty(contentType))`n                    {`n                        contentType = `"application/x-www-form-urlencoded`";`n                    }`n                    if (!String.IsNullOrEmpty(body))`n                    {`n                        res = await client.SendAsync(`n                            (new HttpRequestMessage(method, uri)`n                            {`n                                Content = (new StringContent(body, Encoding.UTF8, contentType))`n                            })`n                        );`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    else`n                    {`n                        res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HtmlDocument = dom;`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"TRACE`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n            }`n            if (!String.IsNullOrEmpty(htmlString))`n            {`n                retObj.ResponseText = htmlString;`n            }`n            retObj.CookieCollection = rCookies;`n            return retObj;`n        }`n        public static RetObj Send(string uri, HttpMethod method = null, OrderedDictionary headers = null, CookieCollection cookies = null, string contentType = null, string body = null, string filepath = null)`n        {`n            Task<RetObj> r = SendHttp(uri, method, headers, cookies, contentType, body, filepath);`n            return r.Result;`n        }`n    }`n}`n`n"
    $z = [Execute.HttpRequest]::Send("https://www.zipcodeapi.com/rest/9ZUVmZ9akj8gW7G40sS4Zs3Htpo1wmJx80Kw9OHbPCtYTrNEVdbrovn5FaGaXL3o/city-zips.json/$($City)/$($State_Code)").ResponseText | ConvertFrom-Json
    $all = $z.zip_codes.Count
    $listingObject = [MyNewPlace.Results]::New()
    $tasks = @()
    for($i = 0; $i -lt $all; $i++)
    {
        if($tasks){
            if($tasks.length -gt 0){
                $running = @($tasks |% isCompleted).Where({!$_}).Count
            }
        }
        $zip = $z.zip_codes[$i]
        $uri = "https://www.mynewplace.com/apartments-for-rent/$($zip)/beds:1/baths:1/"
        if($running){
            while(@($tasks |% isCompleted).Where({!$_}).Count -gt 3){ }
        }
        $tasks += $listingObject.AddResult($uri)
        if($i -gt 0){
            write-progress -PercentComplete ($i/$all*100) -status "$([Math]::Round(($i/$all*100),2))%" -activity "$($z.zip_codes[($i + 1)]) :: $($i) tasks started of $($all)"
        }
    }
    write-progress -Completed -Status "100%" -Activity "$($all) of $($all)"
    $allTasks = $tasks.Count
    while(@($tasks |% isCompleted).Where({!$_}))
    {
        $completed = @($tasks |% isCompleted).Where({$_}).Count
        write-Progress -PercentComplete ($completed/$allTasks*100) -Status "$([Math]::Round(($completed/$allTasks*100),2))%" -Activity "$($completed) tasks complete of $($alltasks)"
    }
    for($i = 0; $i -lt $listingObject.ListingCollection.Count; $i++)
    {
        $listingObject.ListingCollection[$i].Address = "$($listingObject.ListingCollection[$i].Address), " + "$(Get-FullAddress -Listing $listingObject.ListingCollection[$i])"
    }
    return $listingObject.ListingCollection
}