function Get-ApartmentListings_WalkScore
{
    [cmdletbinding()]
    Param(
        [string]$City,
        [string]$State_Code
    )
    . .\Public\Get-ApartmentListings_GeoCode.ps1
    @(
        "C:\Windows\assembly\GAC\Microsoft.mshtml\7.0.3300.0__b03f5f7f11d50a3a\Microsoft.mshtml.dll",
        "$($PWD.Path)\lib\Newtonsoft.Json.dll",
        "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Net.Http.dll",
        "C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll"
    ).ForEach({
        Add-Type -Path $_
    })
    Add-Type -ReferencedAssemblies @(
        "C:\Windows\assembly\GAC\Microsoft.mshtml\7.0.3300.0__b03f5f7f11d50a3a\Microsoft.mshtml.dll",
        "$($PWD.Path)\lib\Newtonsoft.Json.dll",
        "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Net.Http.dll",
        "C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll"
    ) -TypeDefinition "namespace WalkScores`n{`n    using WalkScore.Execute;`n    using System;`n    using System.Collections;`n    using System.Collections.Generic;`n    using System.Text;`n    using System.Text.RegularExpressions;`n    using Newtonsoft.Json;`n    using Newtonsoft.Json.Linq;`n    using System.Linq;`n    using System.Net;`n    using System.Threading.Tasks;`n    public class PlusCode`n    {`n        public string compound_code { get; set; }`n        public string global_code { get; set; }`n    }`n    public class AddressComponent`n    {`n        public string long_name { get; set; }`n        public string short_name { get; set; }`n        public List<string> types { get; set; }`n    }`n    public class Location`n    {`n        public double lat { get; set; }`n        public double lng { get; set; }`n    }`n    public class Northeast`n    {`n        public double lat { get; set; }`n        public double lng { get; set; }`n    }`n    public class Southwest`n    {`n        public double lat { get; set; }`n        public double lng { get; set; }`n    }`n    public class Viewport`n    {`n        public Northeast northeast { get; set; }`n        public Southwest southwest { get; set; }`n    }`n    public class Bounds`n    {`n        public Northeast northeast { get; set; }`n        public Southwest southwest { get; set; }`n    }`n    public class Geometry`n    {`n        public Location location { get; set; }`n        public string location_type { get; set; }`n        public Viewport viewport { get; set; }`n        public Bounds bounds { get; set; }`n    }`n    public class Result`n    {`n        public List<AddressComponent> address_components { get; set; }`n        public string formatted_address { get; set; }`n        public Geometry geometry { get; set; }`n        public string place_id { get; set; }`n        public PlusCode plus_code { get; set; }`n        public List<string> types { get; set; }`n    }`n    public class Root`n    {`n        public PlusCode plus_code { get; set; }`n        public List<Result> results { get; set; }`n        public string status { get; set; }`n    }`n    public class Listing`n    {`n        public Double Latitude`n        {`n            get;`n            set;`n        }`n        public Double Longitude`n        {`n            get;`n            set;`n        }`n        public Int32 Beds_Low`n        {`n            get;`n            set;`n        }`n        public Int32 Beds_High`n        {`n            get;`n            set;`n        }`n        public Int32 Price_Low`n        {`n            get;`n            set;`n        }`n        public Int32 Price_High`n        {`n            get;`n            set;`n        }`n        public DateTime Datelisted`n        {`n            get;`n            set;`n        }`n        public string Link`n        {`n            get;`n            set;`n        }`n        public string ImageUri`n        {`n            get;`n            set;`n        }`n        public string Address`n        {`n            get;`n            set;`n        }`n        public string Beds`n        {`n            get;`n            set;`n        }`n        public Int32 ListingPrice`n        {`n            get;`n            set;`n        }`n        public string phoneNumber`n        {`n            get;`n            set;`n        }`n    }`n    public class Roots`n    {`n        public List<List<dynamic>> results { get; set; }`n        public int count { get; set; }`n        public int in_viewport { get; set; }`n        public int last_seen { get; set; }`n    }`n    public class ListingsObject`n    {`n        public List<Listing> ListingCollection = new List<Listing>();`n    }`n    public class Results`n    {`n        public Int32 all = 0;`n        public static dynamic ConvertFromJson(string jsonData)`n        {`n            return JsonConvert.DeserializeObject<object>(jsonData);`n        }`n        private static Regex priceRegex = new Regex(@`"class=`"`"price-range.*\n.*\`$([0-9,]*)\s-\s\`$([0-9,]*)\s*`");`n        private static Regex commaRegex = new Regex(@`",`");`n        //private static Int32 low = 0;`n        //private static Int32 high = 0;`n        private void GetResults(List<dynamic> listing, List<Listing> collection)`n        {`n            Listing item = new Listing();`n            item.Address = listing[16] + `", `" + Address.Parse(listing[1].ToString(), listing[2].ToString());`n            item.Beds = listing[22][0].ToString();`n            item.Beds_High = Convert.ToInt32(listing[3][1].ToString());`n            if (Convert.ToInt32(listing[3][1].ToString()) == 0)`n            {`n                item.Beds_Low = 1;`n            }`n            else`n            {`n                item.Beds_Low = Convert.ToInt32(listing[3][1].ToString());`n            }`n            item.Datelisted = DateTime.Parse(`"1970-01-01`").AddSeconds(Convert.ToInt32(listing[5].ToString())).ToLocalTime();`n            item.ImageUri = listing[11].ToString();`n            item.Latitude = Convert.ToDouble(listing[1].ToString());`n            item.Longitude = Convert.ToDouble(listing[2].ToString());`n            item.ListingPrice = Convert.ToInt32(new Regex(`",`").Replace(listing[22][2].ToString(), String.Empty));`n            item.Price_High = Convert.ToInt32(listing[4][(listing[4].Count - 1)].ToString());`n            Int32 price_low = 0;`n            try`n            {`n                price_low = Int32.Parse(listing[4][0].ToString());`n                item.Price_Low = price_low;`n            }`n            catch`n            {`n                Console.Write(listing[4][0].ToString());`n            }`n            item.Link = `"https://www.walkscore.com/score/`" + listing[10].ToString();`n            item.phoneNumber = PhoneNumber.GetPhoneNumber(item.Link);`n            collection.Add(item);`n        }`n        public async Task AddResult(List<dynamic> listing, List<Listing> collection)`n        {`n            await Task.Factory.StartNew(() =>`n            {`n                GetResults(listing, collection);`n            }, TaskCreationOptions.None);`n        }`n    }`n    public class Address`n    {`n        private static Root ConvertFromJson(string jsonData)`n        {`n            Root geoCodeObj = JsonConvert.DeserializeObject<Root>(jsonData);`n            return geoCodeObj;`n        }`n        public static string Parse(string lat, string lng)`n        {`n            string c = String.Empty;`n            string s = String.Empty;`n            string z = String.Empty;`n            string uri = `"https://maps.googleapis.com/maps/api/geocode/json?latlng=`" + lat + `",`" + lng + `"&key=`" + Environment.GetEnvironmentVariable(@`"GoogleGeoCode_API_Key`", EnvironmentVariableTarget.User);`n            RetObject r = HttpRequest.Send(uri);`n            Root geo = ConvertFromJson(r.ResponseText);`n            geo.results.Where(i => {`n                return (i.geometry.location_type.Equals(@`"ROOFTOP`") & (i.types.Contains(@`"premise`") | i.types.Contains(@`"real_estate_agency`") | i.types.Contains(@`"street_address`")));`n            }).ToList().ForEach((i) => {`n                i.address_components.ToList().Where(a => {`n                    return (a.types.Contains(@`"locality`") | a.types.Contains(@`"administrative_area_level_1`") | a.types.Contains(@`"postal_code`"));`n                }).ToList().ForEach((b) => {`n                    AddressComponent ac = b;`n                    string t = b.types.FirstOrDefault();`n                    switch (t)`n                    {`n                        case `"locality`":`n                            c = ac.long_name;`n                            break;`n                        case `"administrative_area_level_1`":`n                            s = ac.long_name;`n                            break;`n                        case `"postal_code`":`n                            z = ac.long_name;`n                            break;`n                    }`n                });`n            });`n            string address = c + `", `" + s + `" `" + z;`n            return address;`n        }`n    }`n    public class PhoneNumber`n    {`n        public static string GetPhoneNumber(string uri)`n        {`n            string phoneNumber = String.Empty;`n            string p = new WebClient().DownloadString(uri);`n            Regex formReg = new Regex(@`"^form`");`n            Regex attrReg = new Regex(@`"data-pretty_phone`");`n            Regex phoneReg1 = new Regex(@`"\(\d+\)`");`n            Regex phoneReg2 = new Regex(@`"(\+\d+)`");`n            Regex phoneReg3 = new Regex(@`"(\d\d\d-\d\d\d-\d\d\d\d)`");`n            Regex phoneReg4 = new Regex(@`"(\d\d\d\.\d\d\d\.\d\d\d\d)`");`n            phoneNumber = p.Split((Char)60).ToList().Where(i => {`n                return (formReg.Match(i).Success & attrReg.Match(i).Success);`n            }).ToList().FirstOrDefault().Split((Char)34).ToList().Where(i => {`n                return (phoneReg1.Match(i).Success);`n            }).ToList().FirstOrDefault();`n            if (String.IsNullOrEmpty(phoneNumber))`n            {`n                phoneNumber = p.Split((Char)60).ToList().Where(i => {`n                    return (formReg.Match(i).Success & attrReg.Match(i).Success);`n                }).ToList().FirstOrDefault().Split((Char)34).ToList().Where(i => {`n                    return (phoneReg2.Match(i).Success);`n                }).ToList().FirstOrDefault();`n            }`n            if (String.IsNullOrEmpty(phoneNumber))`n            {`n                phoneNumber = p.Split((Char)60).ToList().Where(i => {`n                    return (formReg.Match(i).Success & attrReg.Match(i).Success);`n                }).ToList().FirstOrDefault().Split((Char)34).ToList().Where(i => {`n                    return (phoneReg3.Match(i).Success);`n                }).ToList().FirstOrDefault();`n            }`n            if (String.IsNullOrEmpty(phoneNumber))`n            {`n                phoneNumber = p.Split((Char)60).ToList().Where(i => {`n                    return (formReg.Match(i).Success & attrReg.Match(i).Success);`n                }).ToList().FirstOrDefault().Split((Char)34).ToList().Where(i => {`n                    return (phoneReg4.Match(i).Success);`n                }).ToList().FirstOrDefault();`n            }`n            return phoneNumber;`n        }`n    }`n}`nnamespace WalkScore.Execute`n{`n    using System;`n    using System.Collections.Generic;`n    using System.Collections.Specialized;`n    using System.Linq;`n    using System.Text;`n    using System.Threading.Tasks;`n    using System.Net.Http;`n    using System.Net.Http.Headers;`n    using System.Net;`n    using System.Collections;`n    using System.Text.RegularExpressions;`n    using System.IO;`n    using System.IO.Compression;`n    using mshtml;`n    public class RetObject`n    {`n        public string ResponseText`n        {`n            get;`n            set;`n        }`n        public OrderedDictionary HttpResponseHeaders`n        {`n            get;`n            set;`n        }`n        public CookieCollection CookieCollection`n        {`n            get;`n            set;`n        }`n        public HTMLDocument HtmlDocument`n        {`n            get;`n            set;`n        }`n        public HttpResponseMessage HttpResponseMessage`n        {`n            get;`n            set;`n        }`n    }`n    public class HttpRequest`n    {`n        private static dynamic DOMParser(string responseText)`n        {`n            dynamic domobj = Activator.CreateInstance(Type.GetTypeFromCLSID(Guid.Parse(@`"{25336920-03F9-11cf-8FD0-00AA00686F13}`")));`n            List<string> memberNames = new List<string>();`n            for (int i = 0; i < memberNames.Count; i++)`n            {`n                memberNames.Add(domobj.GetType().GetMembers()[i].Name);`n            }`n            if (memberNames.Contains(`"IHTMLDocument2_write`"))`n            {`n                domobj.IHTMLDocument2_write(Encoding.Unicode.GetBytes(responseText));`n            }`n            else`n            {`n                domobj.write(Encoding.Unicode.GetBytes(responseText));`n            }`n            return domobj;`n        }`n        private static CookieCollection SetCookieParser(List<string> setCookie, CookieCollection cooks, CookieCollection initCookies)`n        {`n            List<Exception> ex = new List<Exception>();`n            List<Hashtable> rckevalues = new List<Hashtable>();`n            List<Hashtable> ckevalues = new List<Hashtable>();`n            List<Cookie> ckeList = new List<Cookie>();`n            if (initCookies != null)`n            {`n                for (int i = 0; i < initCookies.Count; i++)`n                {`n                    ckeList.Add(initCookies[i]);`n                    Hashtable h = new Hashtable();`n                    h.Add(initCookies[i].Name, initCookies[i].Value);`n                    ckevalues.Add(h);`n                }`n            }`n            try`n            {`n`n                List<string> rckes = new List<string>();`n                for (int i = 0; i < cooks.Count; i++)`n                {`n                    rckes.Add(cooks[i].Name);`n                }`n                foreach (string set in setCookie)`n                {`n                    Cookie cke = new Cookie();`n                    for (int i = 0; i < set.Split(';').ToList().Count; i++)`n                    {`n                        List<string> v = new List<string>();`n                        string item = set.Split(';').ToList()[i];`n                        for (int ii = 1; ii < item.Split('=').ToList().Count; ii++)`n                        {`n                            v.Add(item.Split('=')[ii]);`n                        }`n                        string va = String.Join('='.ToString(), v);`n                        string key = new Regex(@`"^(\s*)`").Replace(item.Split('=').ToList()[0], `"`");`n                        string value = new Regex(@`"^(\s*)`").Replace(va, `"`");`n                        if (i == 0)`n                        {`n                            cke.Name = key;`n                            cke.Value = value;`n                        }`n                        else`n                        {`n                            switch (key.ToLower())`n                            {`n                                case `"comment`":`n                                    cke.Comment = value;`n                                    break;`n                                case `"commenturi`":`n                                    cke.CommentUri = new Uri(value);`n                                    break;`n                                case `"httponly`":`n                                    cke.HttpOnly = bool.Parse(value);`n                                    break;`n                                case `"discard`":`n                                    cke.Discard = bool.Parse(value);`n                                    break;`n                                case `"domain`":`n                                    cke.Domain = value;`n                                    break;`n                                case `"expires`":`n                                    cke.Expires = DateTime.Parse(value);`n                                    break;`n                                case `"name`":`n                                    cke.Name = value;`n                                    break;`n                                case `"path`":`n                                    cke.Path = value;`n                                    break;`n                                case `"port`":`n                                    cke.Port = value;`n                                    break;`n                                case `"secure`":`n                                    cke.Secure = bool.Parse(value);`n                                    break;`n                                case `"value`":`n                                    cke.Value = value;`n                                    break;`n                                case `"version`":`n                                    cke.Version = int.Parse(value);`n                                    break;`n                            }`n                        }`n                        if (!rckes.Contains(cke.Name))`n                        {`n                            cooks.Add(cke);`n                        }`n                        else`n                        {`n                            CookieCollection tempRCkes = new CookieCollection();`n                            for (int ii = 0; ii < cooks.Count; ii++)`n                            {`n                                Cookie current = cooks[ii];`n                                if (!current.Name.Equals(cke.Name))`n                                {`n                                    tempRCkes.Add(current);`n                                }`n                            }`n                            tempRCkes.Add(cke);`n                            cooks = new CookieCollection();`n                            for (int ii = 0; ii < tempRCkes.Count; ii++)`n                            {`n                                cooks.Add(tempRCkes[ii]);`n                            }`n                            rckes = new List<string>();`n                            for (int ii = 0; ii < cooks.Count; ii++)`n                            {`n                                rckes.Add(cooks[ii].Name);`n                            }`n                        }`n                    }`n                }`n                if (cooks != null)`n                {`n                    for (int i = 0; i < cooks.Count; i++)`n                    {`n                        Hashtable h = new Hashtable();`n                        h.Add(cooks[i].Name, cooks[i].Value);`n                        rckevalues.Add(h);`n                    }`n                }`n                if (ckevalues != null)`n                {`n                    if (rckevalues != null)`n                    {`n                        List<string> rNames = new List<string>();`n                        List<string> rValue = new List<string>();`n                        for (int i = 0; i < rckevalues.Count; i++)`n                        {`n                            string rcken = rckevalues[i].Keys.ToString();`n                            string rckev = rckevalues[i].Values.ToString();`n                            rNames.Add(rcken);`n                            rValue.Add(rckev);`n                        }`n                        for (int i = 0; i < ckevalues.Count; i++)`n                        {`n                            string ckeName = ckevalues[i].Keys.ToString();`n                            string ckeValu = ckevalues[i].Values.ToString();`n                            if (!rValue.Contains(ckeValu))`n                            {`n                                if (!rNames.Contains(ckeName))`n                                {`n                                    cooks.Add(ckeList.Where(item => item.Name.Equals(ckeName)).FirstOrDefault());`n                                }`n                            }`n                            else`n                            {`n                                if (!rNames.Contains(ckeName))`n                                {`n                                    cooks.Add(ckeList.Where(item => item.Name.Equals(ckeName)).FirstOrDefault());`n                                }`n                            }`n                        }`n                    }`n                    else`n                    {`n                        ckeList.ForEach(i => cooks.Add(i));`n                    }`n                }`n            }`n            catch (Exception e)`n            {`n                ex.Add(e);`n            }`n            return cooks;`n        }`n        public static void CopyTo(Stream src, Stream dest)`n        {`n            byte[] bytes = new byte[4096];`n            int cnt;`n            while ((cnt = src.Read(bytes, 0, bytes.Length)) != 0)`n            {`n                dest.Write(bytes, 0, cnt);`n            }`n        }`n        public static string Unzip(byte[] bytes)`n        {`n            using (var msi = new MemoryStream(bytes))`n            using (var mso = new MemoryStream())`n            {`n                using (var gs = new GZipStream(msi, CompressionMode.Decompress))`n                {`n                    //gs.CopyTo(mso);`n                    CopyTo(gs, mso);`n                }`n                return Encoding.UTF8.GetString(mso.ToArray());`n            }`n        }`n        private static async Task<RetObject> SendHttp(string uri, HttpMethod method = null, OrderedDictionary headers = null, CookieCollection cookies = null, string contentType = null, string body = null, string filepath = null)`n        {`n            byte[] reStream;`n            RetObject retObj = new RetObject();`n            HttpResponseMessage res = new HttpResponseMessage();`n            OrderedDictionary httpResponseHeaders = new OrderedDictionary();`n            CookieCollection responseCookies;`n            CookieCollection rCookies = new CookieCollection();`n            List<string> setCookieValue = new List<string>();`n            CookieContainer coo = new CookieContainer();`n            dynamic dom = new object();`n            string htmlString = String.Empty;`n            if (method == null)`n            {`n                method = HttpMethod.Get;`n            }`n            HttpClientHandler handle = new HttpClientHandler()`n            {`n                AutomaticDecompression = (DecompressionMethods)1 & (DecompressionMethods)2,`n                UseProxy = false,`n                AllowAutoRedirect = true,`n                MaxAutomaticRedirections = 500`n            };`n            HttpClient client = new HttpClient(handle);`n            if (!client.DefaultRequestHeaders.Contains(`"User-Agent`"))`n            {`n                client.DefaultRequestHeaders.Add(`"User-Agent`", `"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36`");`n            }`n            if (client.DefaultRequestHeaders.Contains(`"Path`"))`n            {`n                client.DefaultRequestHeaders.Remove(`"Path`");`n            }`n            client.DefaultRequestHeaders.Add(`"Path`", (new Uri(uri).PathAndQuery));`n            List<string> headersToSkip = new List<string>();`n            headersToSkip.Add(`"Accept`");`n            headersToSkip.Add(`"pragma`");`n            headersToSkip.Add(`"Cache-Control`");`n            headersToSkip.Add(`"Date`");`n            headersToSkip.Add(`"Content-Length`");`n            headersToSkip.Add(`"Content-Type`");`n            headersToSkip.Add(`"Expires`");`n            headersToSkip.Add(`"Last-Modified`");`n            if (headers != null)`n            {`n                headersToSkip.ForEach((i) => {`n                    headers.Remove(i);`n                });`n                IEnumerator enume = headers.Keys.GetEnumerator();`n                while (enume.MoveNext())`n                {`n                    string key = enume.Current.ToString();`n                    string value = String.Join(`"\n`", headers[key]);`n                    if (client.DefaultRequestHeaders.Contains(key))`n                    {`n                        client.DefaultRequestHeaders.Remove(key);`n                    }`n                    try`n                    {`n                        client.DefaultRequestHeaders.Add(key, value);`n                    }`n                    catch`n                    {`n                        client.DefaultRequestHeaders.TryAddWithoutValidation(key, value);`n                    }`n                }`n            }`n            if (cookies != null)`n            {`n                IEnumerator cnume = cookies.GetEnumerator();`n                while (cnume.MoveNext())`n                {`n                    Cookie cook = (Cookie)cnume.Current;`n                    coo.Add(cook);`n                }`n                handle.CookieContainer = coo;`n            }`n            switch (method.ToString())`n            {`n                case `"DELETE`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"GET`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"HEAD`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"OPTIONS`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"POST`":`n                    if (String.IsNullOrEmpty(contentType))`n                    {`n                        contentType = `"application/x-www-form-urlencoded`";`n                    }`n                    if (!String.IsNullOrEmpty(body))`n                    {`n                        switch (contentType)`n                        {`n                            case @`"application/x-www-form-urlencoded`":`n                                res = await client.SendAsync(`n                                    (new HttpRequestMessage(method, uri)`n                                    {`n                                        Content = (new StringContent(body, Encoding.UTF8, contentType))`n                                    })`n                                );`n                                break;`n                            case @`"multipart/form-data`":`n                                MultipartFormDataContent mpc = new MultipartFormDataContent(`"Boundary----`" + DateTime.Now.Ticks.ToString(`"x`"));`n                                if (!String.IsNullOrEmpty(filepath))`n                                {`n                                    if (File.Exists(filepath))`n                                    {`n                                        ByteArrayContent bac = new ByteArrayContent(File.ReadAllBytes(filepath));`n                                        bac.Headers.Add(`"Content-Type`", `"application/octet-stream`");`n                                        mpc.Add(bac, new FileInfo(filepath).Name);`n                                    }`n                                }`n                                if (!String.IsNullOrEmpty(body))`n                                {`n                                    StringContent sc = new StringContent(body, Encoding.UTF8, @`"application/x-www-form-urlencoded`");`n                                    mpc.Add(sc);`n                                }`n                                res = await client.SendAsync(`n                                    (new HttpRequestMessage(method, uri)`n                                    {`n                                        Content = mpc`n                                    })`n                                );`n                                break;`n                            default:`n                                res = await client.SendAsync(`n                                    (new HttpRequestMessage(method, uri)`n                                    {`n                                        Content = (new StringContent(body, Encoding.UTF8, contentType))`n                                    })`n                                );`n                                break;`n                        }`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    else`n                    {`n                        res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"PUT`":`n                    if (String.IsNullOrEmpty(contentType))`n                    {`n                        contentType = `"application/x-www-form-urlencoded`";`n                    }`n                    if (!String.IsNullOrEmpty(body))`n                    {`n                        res = await client.SendAsync(`n                            (new HttpRequestMessage(method, uri)`n                            {`n                                Content = (new StringContent(body, Encoding.UTF8, contentType))`n                            })`n                        );`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    else`n                    {`n                        res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                        if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                        {`n                            reStream = res.Content.ReadAsByteArrayAsync().Result;`n                            htmlString = Unzip(reStream);`n                        }`n                        else`n                        {`n                            htmlString = res.Content.ReadAsStringAsync().Result;`n                        }`n                        try`n                        {`n                            setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                        }`n                        catch`n                        { }`n                        res.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                        res.Content.Headers.ToList().ForEach((i) =>`n                        {`n                            httpResponseHeaders.Add(i.Key, i.Value);`n                        });`n                    }`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HtmlDocument = dom;`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n                case `"TRACE`":`n                    res = await client.SendAsync((new HttpRequestMessage(method, uri)));`n                    if (res.Content.Headers.ContentEncoding.ToString().ToLower().Equals(`"gzip`"))`n                    {`n                        reStream = res.Content.ReadAsByteArrayAsync().Result;`n                        htmlString = Unzip(reStream);`n                    }`n                    else`n                    {`n                        htmlString = res.Content.ReadAsStringAsync().Result;`n                    }`n                    try`n                    {`n                        setCookieValue = res.Headers.GetValues(`"Set-Cookie`").ToList();`n                    }`n                    catch`n                    { }`n                    res.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    res.Content.Headers.ToList().ForEach((i) =>`n                    {`n                        httpResponseHeaders.Add(i.Key, i.Value);`n                    });`n                    responseCookies = handle.CookieContainer.GetCookies(new Uri(uri));`n                    rCookies = SetCookieParser(setCookieValue, responseCookies, cookies);`n                    if (!String.IsNullOrEmpty(htmlString))`n                    {`n                        dom = DOMParser(htmlString);`n                        retObj.HtmlDocument = dom;`n                    }`n                    retObj.HttpResponseHeaders = httpResponseHeaders;`n                    retObj.HttpResponseMessage = res;`n                    break;`n            }`n            if (!String.IsNullOrEmpty(htmlString))`n            {`n                retObj.ResponseText = htmlString;`n            }`n            retObj.CookieCollection = rCookies;`n            return retObj;`n        }`n        public static RetObject Send(string uri, HttpMethod method = null, OrderedDictionary headers = null, CookieCollection cookies = null, string contentType = null, string body = null, string filepath = null)`n        {`n            Task<RetObject> r = SendHttp(uri, method, headers, cookies, contentType, body, filepath);`n            return r.Result;`n        }`n    }`n}`n"
    $geo = Get-ApartmentListings_GeoCode -City "$($City)" -State_Code "$($State_Code)"
    $q = [ordered]@{
        "zoom"="12"
        "sort"="14_low"
        "filters"="7=0:100&4_1=0:1000000&4=0:2450&3=1:2&21_1=1&21_4=1&21_2=1&11=1&8=0&9=0&hidden=0&18=0&0_S8=0"
        "hood"="off"
        "overlay"="walkability"
        "nearby"="{}"
        "hiddenids"=""
        "lat"="$($geo.Latitude)"
        "lng"="$($geo.Longitude)"
        "rentsale"="2"
        "sw"="$($geo.SouthWest)"
        "ne"="$($geo.NorthEast)"
    }
    $qString = @($q.Keys.ForEach({"$([Uri]::EscapeDataString("$($_)"))=$([Uri]::EscapeDataString("$($q[$_])"))"})) -join '&'
    $qUri = "https://www.walkscore.com/apartments/search/$($City)-$($state_Code)/?" + $qString
    $b = [ordered]@{
        "query"="$($qUri)"
        "max"="6000"
        "new_fps"="true"
        "full"="true"
    }
    $body = @($b.Keys.ForEach({"$([Uri]::EscapeDataString("$($_)"))=$([Uri]::EscapeDataString("$($b[$_])"))"})) -join '&'
    $Uri = "https://www.walkscore.com/rentals"
    $Headers = [ordered]@{
        "Pragma"="no-cache"
        "Cache-Control"="no-cache"
        "sec-ch-ua"="`"Google Chrome`";v=`"89`", `"Chromium`";v=`"89`", `";Not A Brand`";v=`"99`""
        "Accept"="application/json, text/javascript, */*; q=0.01"
        "DNT"="1"
        "X-Requested-With"="XMLHttpRequest"
        "sec-ch-ua-mobile"="?0"
        "User-Agent"="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
        "Origin"="https://www.walkscore.com"
        "Sec-Fetch-Site"="same-origin"
        "Sec-Fetch-Mode"="cors"
        "Sec-Fetch-Dest"="empty"
        "Referer"="https://www.walkscore.com/apartments/search/$($state_Code)/$($city)"
        "Accept-Encoding"="gzip, deflate"
        "Accept-Language"="en-US,en;q=0.9"
    }
    $ContentType = "application/x-www-form-urlencoded"
    $r = [WalkScore.Execute.HttpRequest]::Send(
        $Uri,
        [System.Net.Http.HttpMethod]::Post,
        $Headers,
        $null,
        $ContentType,
        $Body
    )
    $robj = [WalkScores.Results]::new()
    $collection = [WalkScores.ListingsObject]::new()
    Add-Type  -ReferencedAssemblies @("$($PWD.Path)\lib\Newtonsoft.Json.dll","C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll") -TypeDefinition "namespace JConvert`n{`n    using Newtonsoft.Json;`n    using Newtonsoft.Json.Linq;`n    using System.Linq;`n    using System.Net;`n    using System.Threading.Tasks;`n    using System;`n    using System.Collections.Generic;`n    public class Roots`n    {`n        public List<List<dynamic>> results { get; set; }`n        public int count { get; set; }`n        public int in_viewport { get; set; }`n        public int last_seen { get; set; }`n    }`n    public class Deserialize`n    {`n        public static Roots ToObject(string responseText)`n        {`n            Roots jsonResponse = JsonConvert.DeserializeObject<Roots>(responseText);`n            return jsonResponse;`n        }`n    }`n}"
    try {
        $obj = [JConvert.Deserialize]::ToObject($r.ResponseText)
    }
    catch {
        Write-Host $r.responseText
    }
    $tasks = @()
    $c = 0
    $all = $obj.results.Count
    foreach($listing in $obj.results)
    {
        if($tasks){
            while(($tasks.Where({!$_.IsCompleted}).Count) -gt 3){}
        }
        $tasks += $robj.AddResult($listing,$collection.ListingCollection)
        $c++
        write-progress -PercentComplete ($c/$all*100) -Activity "$([math]::Round(($c/$all*100),2))%" -Status "$($c) tasks started of $($all)"
    }
    $all = $tasks.Count
    while($tasks.Where({!$_.IsCompleted}))
    {
        $c = $tasks.where({$_.IsCompleted}).Count
        if($c -gt 0){
            write-progress -PercentComplete ($c/$all*100) -Activity "$([math]::Round(($c/$all*100),2))%" -Status "$($c) tasks completed of $($all)"
        }
    }
    return $collection.ListingCollection
}